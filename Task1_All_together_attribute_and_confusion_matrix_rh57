import sys
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.utils import shuffle
from scipy.sparse import coo_matrix
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from mpl_toolkits.axes_grid1 import make_axes_locatable
from sklearn import metrics, preprocessing
from sklearn.metrics import recall_score, plot_confusion_matrix
from sklearn.metrics import precision_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.naive_bayes import GaussianNB

assert sys.version_info >= (3, 5)


class CORRELATION:
    def correlations(self, path):
        X = pd.read_csv("/Users/Hookay/Desktop/Weka/Road signs/dataprep/Python/x_train_gr_smpl.csv")
        # import Y
        y = pd.read_csv(path)
        # make sure Y is column
        y = np.ravel(y)
        # insert Y to last column of X
        X.insert(2304, "class", y, allow_duplicates=False)

        # mix the rows
        X = shuffle(X, random_state=0)
        # do the correlation
        corr_matrix = X.corr()
        # get the top 10 values if 5 then head(6) if 20 then head(21) first one is class
        tmp = corr_matrix["class"].sort_values(ascending=False).head(11)
        # get the labels
        names = tmp.keys()
        # get rid of the first value which is class
        b = names[1:]
        # make sure no repetition occurs
        bundle = list(dict.fromkeys(b))
        print(bundle)
        print("")
        return bundle


if __name__ == "__main__":

    co = CORRELATION()

    # create array to store labels
    bundle = []

    # iterate trough 0-10 to get all the signs
    for i in range(0, 10):
        print("Top 10 most correlated pixels of sign " + str(i) + ":")
        path = "/Users/Hookay/Desktop/Weka/Road signs/deep/Python/y_train_smpl_" + str(i) + ".csv"
        # place the found labels into the bundle array
        bundle.extend(co.correlations(path))

    # read in data for correlation
    X = pd.read_csv("/Users/Hookay/Desktop/Weka/Road signs/dataprep/Python/x_train_gr_smpl.csv")
    Y = pd.read_csv("/Users/Hookay/Desktop/Weka/Road signs/dataprep/Python/y_train_smpl.csv")
    # make sure both y is in column and bundle is in row shape
    Y = np.ravel(Y)
    # make sure no repetition occurs in the full set
    bundle = np.unique(bundle)
    bundle = np.ravel(bundle)
    # get the labels mach with X data
    top = X[bundle]

    # coo_matrix uses three sub-arrays to store the element values and their coordinate positions.row[] column[] data[]
    top_sparse = coo_matrix(top)

    # X_sparse to keep track of position and data
    top, X_sparse, Y = shuffle(top, top_sparse, Y, random_state=0)
    # split to train and test
    X_train, X_test, y_train, y_test = train_test_split(top, Y, test_size=.33, random_state=17)

    y_expect = y_test

    # Multinomial
    print("MULTINOMIAL")
    y_train = np.ravel(y_train)
    MultiNB = MultinomialNB()
    MultiNB.fit(X_train, y_train)
    y_pred = MultiNB.predict(X_test)

    # ACCURACY
    print("")
    print("Accuracy Multinomial:", metrics.accuracy_score(y_expect, y_pred))

    # Recall
    print("")
    print("Recall Multinomial:", recall_score(y_expect, y_pred, average=None))

    # Precision
    print("")
    print("Precision Multinomial:", precision_score(y_expect, y_pred, average=None))

    # CONFUSION MATRIX
    print("")
    print(confusion_matrix(y_expect, y_pred))
    print("")
